// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
   user
   admin
}


model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  email       String   @unique
  phone       String?
  password    String
  role        Role      @default(user)
  address     Address[]
  cart              Cart?
  orders            Orders[]
}

model Address {
  id             Int          @id @default(autoincrement())
  address        String
  city           String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int     @map("user_id")
}

model Orders {
  id               Int            @id @default(autoincrement())
 OrderDate     DateTime
  TotalAmount   Float
   user       User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int     @map("user_id")
  order_item      Order_item[]
  payment Payment[]
}

model Order_item {
  id        Int     @id @default(autoincrement())
  qunatity  Int     
  subtotal Int  
  orders     Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   Int
   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}

model Product {
    id            Int           @id @default(autoincrement())
    name          String
    description   String?
      size          String
  color         String
  Price         Float
  StockQuantity Int
  order_item      Order_item[]
    category           Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId         Int
     cart      Cart[]
}



model Cart {
  id                  Int            @id @default(autoincrement())
  Quantity            Int    
  user           User  @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId         Int     @unique @map("customer_id")
   product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
 
}


model Category {
  id       Int       @id @default(autoincrement())
  name     String
  Description   String?
  products Product[]
  
}

model Payment {
    id          Int      @id @default(autoincrement())
    amount      Float
    paymentDate DateTime
    paymentMethod String
    orders    Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    orderId   Int
}

